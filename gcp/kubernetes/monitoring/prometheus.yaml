apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: social-proof-system
  labels:
    app: prometheus
    environment: staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard-rwo

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: social-proof-system
  labels:
    app: prometheus
    environment: staging

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    environment: staging
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
    environment: staging
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: social-proof-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: social-proof-system
  labels:
    app: prometheus
    environment: staging
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      # Microservices monitoring
      - job_name: 'integrations-service'
        static_configs:
          - targets: ['integrations-service:3001']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'notification-stream-service'
        static_configs:
          - targets: ['notification-stream-service:3002']
        metrics_path: '/metrics'
        scrape_interval: 15s
      
      - job_name: 'notifications-service'
        static_configs:
          - targets: ['notifications-service:3003']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'users-service'
        static_configs:
          - targets: ['users-service:3004']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'analytics-service'
        static_configs:
          - targets: ['analytics-service:3005']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'billing-service'
        static_configs:
          - targets: ['billing-service:3006']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      # Infrastructure monitoring
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres:5432']
        metrics_path: '/metrics'
        scrape_interval: 60s
      
      - job_name: 'redis'
        static_configs:
          - targets: ['redis:6379']
        metrics_path: '/metrics'
        scrape_interval: 60s
      
      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka:9092']
        metrics_path: '/metrics'
        scrape_interval: 60s
      
      - job_name: 'clickhouse'
        static_configs:
          - targets: ['clickhouse:8123']
        metrics_path: '/metrics'
        scrape_interval: 60s

  alert-rules.yml: |
    groups:
      - name: social-proof-alerts
        rules:
          # High CPU usage
          - alert: HighCPUUsage
            expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% for more than 5 minutes on {{ $labels.instance }}"
          
          # High memory usage
          - alert: HighMemoryUsage
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 90
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 90% for more than 5 minutes on {{ $labels.instance }}"
          
          # Service down
          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service is down"
              description: "{{ $labels.job }} service has been down for more than 1 minute"
          
          # High response time
          - alert: HighResponseTime
            expr: histogram_quantile(0.95, http_request_duration_seconds_bucket) > 2
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is above 2 seconds for {{ $labels.job }}"
          
          # Database connection issues
          - alert: DatabaseConnectionIssues
            expr: increase(database_connection_errors_total[5m]) > 5
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "Database connection issues"
              description: "More than 5 database connection errors in the last 5 minutes for {{ $labels.service }}"
          
          # Kafka lag
          - alert: KafkaConsumerLag
            expr: kafka_consumer_lag_sum > 1000
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kafka consumer lag is high"
              description: "Consumer lag is above 1000 messages for {{ $labels.topic }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: social-proof-system
  labels:
    app: prometheus
    tier: monitoring
    environment: staging
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        tier: monitoring
        environment: staging
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          ports:
            - containerPort: 9090
              protocol: TCP
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=30d'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
          resources:
            requests:
              memory: "2Gi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1000m"
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
            - name: prometheus-config
              mountPath: /etc/prometheus/rules/alert-rules.yml
              subPath: alert-rules.yml
            - name: prometheus-storage
              mountPath: /prometheus
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: social-proof-system
  labels:
    app: prometheus
    tier: monitoring
    environment: staging
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: web
  selector:
    app: prometheus 