name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      # Start Redis service container
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

      # Start PostgreSQL service container
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: social_proof_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        working-directory: ./microservices

      - name: Create schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d social_proof_test -f schema.sql
        working-directory: ./microservices

      - name: Lint code
        run: npm run lint
        working-directory: ./microservices

      - name: Run tests
        run: npm test
        working-directory: ./microservices
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/social_proof_test
          REDIS_URL: redis://localhost:6379/1

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./microservices/coverage

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Generate version tag
        id: version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "TAG=${BRANCH_NAME}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./microservices
          file: ./microservices/services/api-gateway/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/api-gateway:${{ steps.version.outputs.TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/api-gateway:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/api-gateway:buildcache,mode=max

      - name: Build and push Integrations Service
        uses: docker/build-push-action@v4
        with:
          context: ./microservices
          file: ./microservices/services/integrations/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/integrations:${{ steps.version.outputs.TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/integrations:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/integrations:buildcache,mode=max

      - name: Build and push Notifications Service
        uses: docker/build-push-action@v4
        with:
          context: ./microservices
          file: ./microservices/services/notifications/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/notifications:${{ steps.version.outputs.TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/notifications:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/notifications:buildcache,mode=max

      - name: Build and push Frontend Service
        uses: docker/build-push-action@v4
        with:
          context: ./microservices
          file: ./microservices/services/notification-stream-service/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.TAG }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/frontend:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/frontend:buildcache,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          cd ./microservices/infrastructure/kubernetes/staging
          # Update image tags in Kubernetes manifests
          VERSION=$(echo $GITHUB_SHA | cut -c1-7)
          sed -i "s|image: ghcr.io/.*/api-gateway:.*|image: ghcr.io/${{ github.repository }}/api-gateway:develop-$VERSION|g" deployment-api-gateway.yaml
          sed -i "s|image: ghcr.io/.*/integrations:.*|image: ghcr.io/${{ github.repository }}/integrations:develop-$VERSION|g" deployment-integrations.yaml
          sed -i "s|image: ghcr.io/.*/notifications:.*|image: ghcr.io/${{ github.repository }}/notifications:develop-$VERSION|g" deployment-notifications.yaml
          sed -i "s|image: ghcr.io/.*/frontend:.*|image: ghcr.io/${{ github.repository }}/frontend:develop-$VERSION|g" deployment-frontend.yaml

          # Apply Kubernetes manifests
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f deployment-api-gateway.yaml
          kubectl apply -f deployment-integrations.yaml
          kubectl apply -f deployment-notifications.yaml
          kubectl apply -f deployment-frontend.yaml
          kubectl apply -f service-api-gateway.yaml
          kubectl apply -f service-integrations.yaml
          kubectl apply -f service-notifications.yaml
          kubectl apply -f service-frontend.yaml
          kubectl apply -f ingress.yaml
