version: "3.8"

services:
  # Infrastructure Services
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: social_proof_mvp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./microservices/services/billing/db/schema.sql:/docker-entrypoint-initdb.d/01-billing-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""
    volumes:
      - clickhouse_dev_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservices
  integrations:
    build:
      context: ./microservices
      dockerfile: services/integrations/Dockerfile.dev
    ports:
      - "3001:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=integrations
      - LOG_LEVEL=debug
    volumes:
      - ./microservices:/app
      - /app/node_modules
      - /app/shared/node_modules
      - /app/services/integrations/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      sh -c "cd /app/services/integrations && npm install && cd /app && npm run dev:integrations"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  billing:
    build:
      context: ./microservices
      dockerfile: services/billing/Dockerfile.dev
    ports:
      - "3006:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=billing
      - LOG_LEVEL=debug
      - PORT=3000
    volumes:
      - ./microservices:/app
      - /app/node_modules
      - /app/shared/node_modules
      - /app/services/billing/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      sh -c "cd /app/services/billing && npm install && cd /app && npm run dev:billing"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notifications:
    build:
      context: ./microservices
      dockerfile: services/notifications/Dockerfile.dev
    ports:
      - "3003:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=notifications
      - LOG_LEVEL=debug
    volumes:
      - ./microservices:/app
      - /app/node_modules
      - /app/shared/node_modules
      - /app/services/notifications/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      sh -c "cd /app/services/notifications && npm install && cd /app && npm run dev:notifications"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-stream:
    build:
      context: ./microservices
      dockerfile: services/notification-stream-service/Dockerfile.dev
    ports:
      - "3002:3002"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=notification-stream
      - LOG_LEVEL=debug
    volumes:
      - ./microservices:/app
      - /app/node_modules
      - /app/shared/node_modules
      - /app/services/notification-stream-service/node_modules
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  users:
    build:
      context: ./microservices
      dockerfile: services/users/Dockerfile.dev
    ports:
      - "3004:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=users
      - LOG_LEVEL=debug
    volumes:
      - ./microservices:/app
      - /app/node_modules
      - /app/shared/node_modules
      - /app/services/users/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    command: >
      sh -c "cd /app/services/users && npm install && cd /app && npm run dev:users"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics:
    build:
      context: ./microservices
      dockerfile: services/analytics/Dockerfile.dev
    ports:
      - "3005:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=analytics
      - LOG_LEVEL=debug
    volumes:
      - ./microservices:/app
      - /app/node_modules
      - /app/shared/node_modules
      - /app/services/analytics/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application
  nextjs:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - .env.dev
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis
      - integrations
      - billing
      - notifications
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_dev_data:
  clickhouse_dev_data:

networks:
  default:
    name: social-proof-dev
