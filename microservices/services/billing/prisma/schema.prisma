// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BillingSite {
  id             String   @id @default(uuid()) @db.Uuid
  name           String
  domain         String
  organizationId String   @map("organization_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("billing_sites")
}

model BillingOrganization {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("billing_organizations")
}

model Plan {
  id                    String                 @id @default(uuid()) @db.Uuid
  name                  String                 @unique
  displayName           String                 @map("display_name")
  description           String?
  priceMonthly          Decimal                @map("price_monthly") @db.Decimal(10, 2)
  priceYearly           Decimal                @map("price_yearly") @db.Decimal(10, 2)
  currency              String                 @default("USD")
  isPublic              Boolean                @default(true) @map("is_public")
  sortOrder             Int                    @default(0) @map("sort_order")
  stripeProductId       String?                @map("stripe_product_id")
  stripeMonthlyPriceId  String?                @map("stripe_monthly_price_id")
  stripeYearlyPriceId   String?                @map("stripe_yearly_price_id")
  createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  features              PlanFeature[]
  limits                PlanLimit[]
  subscriptions         Subscription[]
  changeRequestsCurrent PlanChangeRequest[]    @relation("CurrentPlan")
  changeRequestsNew     PlanChangeRequest[]    @relation("RequestedPlan")
  historyPrevious       SubscriptionHistory[]  @relation("PreviousPlan")
  historyNew            SubscriptionHistory[]  @relation("NewPlan")

  @@map("plans")
}

model PlanFeature {
  id            String   @id @default(uuid()) @db.Uuid
  planId        String   @map("plan_id") @db.Uuid
  name          String
  description   String?
  featureType   String   @map("feature_type")
  value         Json
  isHighlighted Boolean  @default(false) @map("is_highlighted")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  plan          Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("plan_features")
}

model PlanLimit {
  id           String   @id @default(uuid()) @db.Uuid
  planId       String   @map("plan_id") @db.Uuid
  resourceType String   @map("resource_type")
  maxValue     Int      @map("max_value")
  overagePrice Decimal? @map("overage_price") @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  plan         Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, resourceType], name: "unique_plan_resource")
  @@map("plan_limits")
}

model Subscription {
  id                   String                @id @default(uuid()) @db.Uuid
  organizationId       String                @map("organization_id") @db.Uuid
  planId               String                @map("plan_id") @db.Uuid
  billingCycle         String                @map("billing_cycle")
  status               String
  trialEndsAt          DateTime?             @map("trial_ends_at") @db.Timestamptz(6)
  currentPeriodStart   DateTime              @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd     DateTime              @map("current_period_end") @db.Timestamptz(6)
  cancelsAtPeriodEnd   Boolean               @default(false) @map("cancels_at_period_end")
  canceledAt           DateTime?             @map("canceled_at") @db.Timestamptz(6)
  stripeSubscriptionId String?               @map("stripe_subscription_id")
  stripeCustomerId     String?               @map("stripe_customer_id")
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  plan                 Plan                  @relation(fields: [planId], references: [id])
  invoices             Invoice[]
  usageRecords         UsageRecord[]
  usageSummaries       UsageSummary[]
  promotionRedemptions PromotionRedemption[]
  history              SubscriptionHistory[]

  @@index([organizationId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model PaymentMethod {
  id                      String   @id @default(uuid()) @db.Uuid
  organizationId          String   @map("organization_id") @db.Uuid
  stripePaymentMethodId   String   @map("stripe_payment_method_id")
  brand                   String
  last4                   String
  expMonth                Int      @map("exp_month")
  expYear                 Int      @map("exp_year")
  isDefault               Boolean  @default(false) @map("is_default")
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([organizationId])
  @@map("payment_methods")
}

model Invoice {
  id               String        @id @default(uuid()) @db.Uuid
  organizationId   String        @map("organization_id") @db.Uuid
  subscriptionId   String        @map("subscription_id") @db.Uuid
  stripeInvoiceId  String?       @map("stripe_invoice_id")
  number           String?
  currency         String        @default("USD")
  subtotal         Decimal       @db.Decimal(10, 2)
  tax              Decimal       @default(0) @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  status           String
  invoicePdfUrl    String?       @map("invoice_pdf_url")
  periodStart      DateTime      @map("period_start") @db.Timestamptz(6)
  periodEnd        DateTime      @map("period_end") @db.Timestamptz(6)
  dueDate          DateTime?     @map("due_date") @db.Timestamptz(6)
  paidAt           DateTime?     @map("paid_at") @db.Timestamptz(6)
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  subscription     Subscription  @relation(fields: [subscriptionId], references: [id])
  items            InvoiceItem[]

  @@index([organizationId])
  @@index([subscriptionId])
  @@index([status])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(uuid()) @db.Uuid
  invoiceId   String   @map("invoice_id") @db.Uuid
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
  amount      Decimal  @db.Decimal(10, 2)
  type        String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_items")
}

model UsageRecord {
  id             String       @id @default(uuid()) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  subscriptionId String       @map("subscription_id") @db.Uuid
  resourceType   String       @map("resource_type")
  quantity       Int
  recordedAt     DateTime     @default(now()) @map("recorded_at") @db.Timestamptz(6)
  
  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([organizationId])
  @@index([subscriptionId])
  @@index([resourceType])
  @@map("usage_records")
}

model UsageSummary {
  id                  String       @id @default(uuid()) @db.Uuid
  organizationId      String       @map("organization_id") @db.Uuid
  subscriptionId      String       @map("subscription_id") @db.Uuid
  resourceType        String       @map("resource_type")
  periodStart         DateTime     @map("period_start") @db.Timestamptz(6)
  periodEnd           DateTime     @map("period_end") @db.Timestamptz(6)
  includedQuantity    Int          @map("included_quantity")
  usedQuantity        Int          @default(0) @map("used_quantity")
  overageQuantity     Int?         @default(0) @map("overage_quantity")
  overageUnitPrice    Decimal?     @map("overage_unit_price") @db.Decimal(10, 2)
  overageAmount       Decimal      @default(0) @map("overage_amount") @db.Decimal(10, 2)
  status              String
  stripeUsageRecordId String?      @map("stripe_usage_record_id")
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  subscription        Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([organizationId])
  @@index([subscriptionId])
  @@index([periodStart, periodEnd])
  @@map("usage_summary")
}

model BillingContact {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @map("organization_id") @db.Uuid
  email          String
  name           String?
  phone          String?
  companyName    String?  @map("company_name")
  addressLine1   String?  @map("address_line1")
  addressLine2   String?  @map("address_line2")
  city           String?
  state          String?
  postalCode     String?  @map("postal_code")
  country        String?
  vatNumber      String?  @map("vat_number")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([organizationId])
  @@map("billing_contacts")
}

model Promotion {
  id                    String                @id @default(uuid()) @db.Uuid
  code                  String                @unique
  description           String?
  discountType          String                @map("discount_type")
  discountValue         Decimal               @map("discount_value") @db.Decimal(10, 2)
  duration              String
  durationMonths        Int?                  @map("duration_months")
  maxRedemptions        Int?                  @map("max_redemptions")
  redemptionCount       Int                   @default(0) @map("redemption_count")
  validFrom             DateTime              @default(now()) @map("valid_from") @db.Timestamptz(6)
  validUntil            DateTime?             @map("valid_until") @db.Timestamptz(6)
  stripePromotionCodeId String?               @map("stripe_promotion_code_id")
  stripeCouponId        String?               @map("stripe_coupon_id")
  isActive              Boolean               @default(true) @map("is_active")
  createdAt             DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  redemptions           PromotionRedemption[]

  @@index([code])
  @@index([isActive, validFrom, validUntil])
  @@map("promotions")
}

model PromotionRedemption {
  id             String       @id @default(uuid()) @db.Uuid
  promotionId    String       @map("promotion_id") @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  subscriptionId String       @map("subscription_id") @db.Uuid
  appliedAt      DateTime     @default(now()) @map("applied_at") @db.Timestamptz(6)
  
  // Relations
  promotion      Promotion    @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("promotion_redemptions")
}

model PlanChangeRequest {
  id                String   @id @default(uuid()) @db.Uuid
  organizationId    String   @map("organization_id") @db.Uuid
  currentPlanId     String   @map("current_plan_id") @db.Uuid
  requestedPlanId   String   @map("requested_plan_id") @db.Uuid
  changeType        String   @map("change_type")
  requestedBy       String   @map("requested_by") @db.Uuid
  reason            String?
  status            String
  processedBy       String?  @map("processed_by") @db.Uuid
  processedAt       DateTime? @map("processed_at") @db.Timestamptz(6)
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  // Relations
  currentPlan       Plan     @relation("CurrentPlan", fields: [currentPlanId], references: [id])
  requestedPlan     Plan     @relation("RequestedPlan", fields: [requestedPlanId], references: [id])

  @@index([organizationId])
  @@index([status])
  @@map("plan_change_requests")
}

model SubscriptionHistory {
  id               String        @id @default(uuid()) @db.Uuid
  organizationId   String        @map("organization_id") @db.Uuid
  subscriptionId   String        @map("subscription_id") @db.Uuid
  previousPlanId   String?       @map("previous_plan_id") @db.Uuid
  newPlanId        String?       @map("new_plan_id") @db.Uuid
  previousStatus   String?       @map("previous_status")
  newStatus        String?       @map("new_status")
  changeType       String        @map("change_type")
  changeReason     String?       @map("change_reason")
  changedBy        String?       @map("changed_by") @db.Uuid
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  
  // Relations
  subscription     Subscription  @relation(fields: [subscriptionId], references: [id])
  previousPlan     Plan?         @relation("PreviousPlan", fields: [previousPlanId], references: [id])
  newPlan          Plan?         @relation("NewPlan", fields: [newPlanId], references: [id])

  @@index([organizationId])
  @@index([subscriptionId])
  @@map("subscription_history")
}